/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package janath;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author gav
 */
public class ViewUserRegistrationsForm extends javax.swing.JFrame {

    /**
     * Creates new form ViewUserRegistrationsForm
     */
    private String userID;

    public ViewUserRegistrationsForm(String userID) {
        initComponents();
        this.userID = userID;
        loadUserRegistrations();
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }

    private void loadUserRegistrations() {
        try {
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/course_registration", "root", "");

            String sql = "SELECT c.course_code, c.course_name FROM registrations r "
                    + "JOIN courses c ON r.course_id = c.id "
                    + "WHERE r.student_id = ?";
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setString(1, userID);

            ResultSet rs = stmt.executeQuery();

            DefaultTableModel model = (DefaultTableModel) courseTable.getModel();
            model.setRowCount(0);

            while (rs.next()) {
                String courseCode = rs.getString("course_code");
                String courseName = rs.getString("course_name");
                model.addRow(new Object[]{courseCode, courseName});
            }

            rs.close();
            stmt.close();
            conn.close();

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error loading courses: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSpinner1 = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        courseTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("User Registrations");

        courseTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Course Name", "Course Code"
            }
        ));
        jScrollPane1.setViewportView(courseTable);

        jButton1.setBackground(javax.swing.UIManager.getDefaults().getColor("Actions.Red"));
        jButton1.setText("Remove");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int selectedRow = courseTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a registration to delete", "No Selection", JOptionPane.WARNING_MESSAGE);
            return;
        }
        String courseCode = (String) courseTable.getValueAt(selectedRow, 0);
        try {
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/course_registration", "root", "");
            String getCourseIdSql = "SELECT id FROM courses WHERE course_code = ?";
            PreparedStatement getCourseIdStmt = conn.prepareStatement(getCourseIdSql);
            getCourseIdStmt.setString(1, courseCode);
            ResultSet rs = getCourseIdStmt.executeQuery();
            if (!rs.next()) {
                JOptionPane.showMessageDialog(this, "Course not found.", "Error", JOptionPane.ERROR_MESSAGE);
                rs.close();
                getCourseIdStmt.close();
                conn.close();
                return;
            }
            String courseId = rs.getString("id");
            rs.close();
            getCourseIdStmt.close();
            String deleteSql = "DELETE FROM registrations WHERE student_id = ? AND course_id = ?";
            PreparedStatement deleteStmt = conn.prepareStatement(deleteSql);
            deleteStmt.setString(1, userID);
            deleteStmt.setString(2, courseId);
            int rows = deleteStmt.executeUpdate();
            deleteStmt.close();
            conn.close();
            if (rows > 0) {
                JOptionPane.showMessageDialog(this, "Registration deleted successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                loadUserRegistrations();
            } else {
                JOptionPane.showMessageDialog(this, "Failed to delete registration.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable courseTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinner1;
    // End of variables declaration//GEN-END:variables

}
